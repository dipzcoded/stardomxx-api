// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                         @id @default(autoincrement())
  firstName             String?
  lastName              String?
  country               String?
  email                 String                      @unique
  password              String?
  phoneNumber           String?
  isVerified            Boolean                     @default(false)
  isActivated           Boolean                     @default(false)
  isSuperAdmin          Boolean                     @default(false)
  role                  String
  profilePicture        String?
  profile               Profile?
  userActivationToken   UserActivationToken?
  userOtpToken          UserOtpToken?
  passwordResetToken    PasswordResetToken?
  posts                 UserPosts[]
  followers             UserFollowers[]             @relation(name: "Followers")
  userFollowing         UserFollowing[]             @relation(name: "Following")
  userComment           UserComment[]
  userPostComments      UserPostComment[]
  userPostLikes         UserPostLikes[]
  userContestPostVotes  ContestPostVote[]
  userCommentLikes      UserPostCommentLikes[]
  commentReply          UserPostCommentReply[]
  userCommentReplyLikes UserPostCommentReplyLikes[]
  contestant            Contestant[]
  secretQuestion        UserSecretQuestion?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  @@map("user")
}

model UserSecretQuestion {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], onDelete: Cascade, references: [id])
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usersecretquestion")
}

model UserOtpToken {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                User     @relation(fields: [userId], onDelete: Cascade, references: [id])
  expireTime          DateTime
  token               String
  secretKey           String
  expirationinseconds String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("userOtpToken")
}

model UserActivationToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], onDelete: Cascade, references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userActivationToken")
}

model PasswordResetToken {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique
  user                User     @relation(fields: [userId], onDelete: Cascade, references: [id])
  token               String
  expirationinseconds String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("passwordResetToken")
}

model Profile {
  id                   Int                   @id @default(autoincrement())
  userId               Int                   @unique
  user                 User                  @relation(fields: [userId], onDelete: Cascade, references: [id])
  passportImage        String?
  address              String
  address2             String?
  town                 String
  state                String
  nextOfKins           UserNextOfKin?
  userEmergencyContact UserEmergencyContact?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@map("profile")
}

model UserNextOfKin {
  id               Int      @id @default(autoincrement())
  profileId        Int      @unique
  profile          Profile  @relation(fields: [profileId], onDelete: Cascade, references: [id])
  name             String
  passportImage    String
  relationshipType String
  phoneNumber      String
  address          String
  address2         String?
  town             String
  state            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("userNextOfKin")
}

model UserEmergencyContact {
  id               Int      @id @default(autoincrement())
  profileId        Int      @unique
  profile          Profile  @relation(fields: [profileId], onDelete: Cascade, references: [id])
  name             String
  passportImage    String
  relationshipType String
  phoneNumber      String
  address          String
  address2         String?
  town             String
  state            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("userEmergencyContact")
}

model UserFollowers {
  id            Int      @id @default(autoincrement())
  userId        Int
  userFollowers User[]   @relation(name: "Followers")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("userfollowers")
}

model UserFollowing {
  id            Int      @id @default(autoincrement())
  userId        Int
  userFollowing User[]   @relation(name: "Following")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("userfollowering")
}

model UserPosts {
  id               Int               @id @default(autoincrement())
  userId           Int?
  user             User?             @relation(fields: [userId], onDelete: Cascade, references: [id])
  contestId        Int?
  contest          Contest?          @relation(fields: [contestId], references: [id], onDelete: Cascade)
  content          String?
  mediaContent     String?
  type             String
  isContestPost    Boolean           @default(false)
  userPostComments UserPostComment[]
  userPostLikes    UserPostLikes[]
  contestPostVote  ContestPostVote[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("userPosts")
}

model UserComment {
  id               Int                    @id @default(autoincrement())
  userId           Int
  comment          String
  mediaContent     String?
  user             User                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userPostComments UserPostComment[]
  commentReply     UserPostCommentReply[] @relation("reply")
  comments         UserPostCommentReply[] @relation("comment")
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  @@map("usercomments")
}

model UserPostComment {
  id               Int                    @id @default(autoincrement())
  postId           Int
  commentId        Int                    @unique
  userId           Int
  post             UserPosts              @relation(fields: [postId], references: [id], onDelete: Cascade)
  userComment      UserComment            @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user             User                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postCommentLikes UserPostCommentLikes[]
  postCommentReply UserPostCommentReply[]
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt

  @@map("userpostcomments")
}

model UserPostCommentReply {
  id                    Int                         @id @default(autoincrement())
  postCommentId         Int
  commentReplyId        Int
  commentId             Int
  userId                Int
  comment               String
  postCommentReply      UserComment                 @relation(fields: [commentReplyId], references: [id], onUpdate: NoAction, onDelete: NoAction, name: "reply")
  userPostComment       UserPostComment             @relation(fields: [postCommentId], references: [id], onDelete: Cascade)
  postComment           UserComment                 @relation(fields: [commentId], references: [id], onUpdate: NoAction, onDelete: NoAction, name: "comment")
  user                  User                        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userCommentReplyLikes UserPostCommentReplyLikes[]
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt

  @@map("userpostcommenttreply")
}

model UserPostLikes {
  id        Int       @id @default(autoincrement())
  postId    Int
  userId    Int
  post      UserPosts @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("userpostlikes")
}

model UserPostCommentLikes {
  id            Int             @id @default(autoincrement())
  postCommentId Int
  userId        Int
  postComment   UserPostComment @relation(fields: [postCommentId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("userpostcommentlikes")
}

model UserPostCommentReplyLikes {
  id                 Int                  @id @default(autoincrement())
  postCommentReplyId Int
  userId             Int
  postCommentReply   UserPostCommentReply @relation(fields: [postCommentReplyId], references: [id], onDelete: Cascade)
  user               User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("userpostcommenttreplylikes")
}

model Contest {
  id                 Int          @id @default(autoincrement())
  name               String
  amountWinning      Int
  maxContestant      Int          @default(100)
  noFreewildCards    Int          @default(2)
  isCompetionOn      Boolean      @default(false)
  prize              Int
  category           String
  duration           String       @default("3 Weeks")
  durationExpiration String
  contestPosts       UserPosts[]
  contestants        Contestant[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@map("contests")
}

model Contestant {
  id             Int              @id @default(autoincrement())
  contestId      Int
  userId         Int
  contest        Contest          @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contestantVote ContestantVote[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ContestPostVote {
  id            Int       @id @default(autoincrement())
  contestPostId Int
  userId        Int
  contestPost   UserPosts @relation(fields: [contestPostId], onDelete: Cascade, references: [id])
  user          User      @relation(fields: [userId], onDelete: NoAction, onUpdate: NoAction, references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("contestpostvotes")
}

model ContestantVote {
  id           Int        @id @default(autoincrement())
  contestantId Int
  Contestant   Contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("contestantvotes")
}
